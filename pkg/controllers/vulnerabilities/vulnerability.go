package vulnerabilities

import (
	"fmt"

	"github.com/awesome-gocui/gocui"
	"github.com/owenrumney/lazytrivy/pkg/config"
	"github.com/owenrumney/lazytrivy/pkg/controllers/base"
	"github.com/owenrumney/lazytrivy/pkg/docker"
	"github.com/owenrumney/lazytrivy/pkg/logger"
	"github.com/owenrumney/lazytrivy/pkg/output"
	"github.com/owenrumney/lazytrivy/pkg/widgets"
)

type Controller struct {
	*base.Controller
	*state
}

func NewVulnerabilityController(cui *gocui.Gui, dockerClient *docker.Client, cfg *config.Config) *Controller {
	return &Controller{
		&base.Controller{
			Cui:          cui,
			DockerClient: dockerClient,
			Views:        make(map[string]widgets.Widget),
			LayoutFunc:   vulnerabilityLayout,
			HelpFunc:     help,
			Config:       cfg,
		},
		&state{},
	}
}

func (c *Controller) Initialise() error {
	logger.Debugf("initialising vulnerability controller")
	var outerErr error

	c.Cui.Update(func(gui *gocui.Gui) error {
		if err := c.RefreshImages(); err != nil {
			return err
		}

		if err := c.configureKeyBindings(); err != nil {
			return fmt.Errorf("failed to configure global keys: %w", err)
		}

		for _, v := range c.Views {
			if err := v.ConfigureKeys(nil); err != nil {
				return fmt.Errorf("failed to configure view keys: %w", err)
			}
		}

		_, err := gui.SetCurrentView(widgets.Images)
		if err != nil {
			outerErr = fmt.Errorf("failed to set current view: %w", err)
		}
		return err
	})

	return outerErr
}

func (c *Controller) CreateWidgets(manager base.Manager) error {
	menuItems := []string{
		"<blue>[?]</blue> help", "s<blue>[w]</blue>itch mode", "<red>[t]</red>erminate scan", "<red>[q]</red>uit",
		"\n\n<yellow>Navigation: Use arrow keys to navigate and ESC to exit screens</yellow>",
	}

	maxX, maxY := c.Cui.Size()
	c.Views[widgets.Images] = widgets.NewImagesWidget(widgets.Images, c)
	c.Views[widgets.Results] = widgets.NewImageResultWidget(widgets.Results, c)
	c.Views[widgets.Menu] = widgets.NewMenuWidget(widgets.Menu, 0, maxY-3, maxX-1, maxY-1, menuItems)
	c.Views[widgets.Status] = widgets.NewStatusWidget(widgets.Status)
	c.Views[widgets.Host] = widgets.NewHostWidget(widgets.Host, c)

	for _, v := range c.Views {
		manager.AddViews(v)
	}
	manager.AddViews(gocui.ManagerFunc(c.LayoutFunc))

	c.SetManager()

	return nil
}

func (c *Controller) SetKeyBinding(viewName string, key interface{}, mod gocui.Modifier, handler func(*gocui.Gui, *gocui.View) error) error {
	if err := c.Cui.SetKeybinding(viewName, key, mod, handler); err != nil {
		return fmt.Errorf("failed to set keybinding for %s: %w", key, err)
	}
	return nil
}

func (c *Controller) Tab() widgets.Tab {
	return widgets.VulnerabilitiesTab
}

func (c *Controller) moveViewLeft(*gocui.Gui, *gocui.View) error {
	if c.Cui.CurrentView().Name() == widgets.Results {
		_, err := c.Cui.SetCurrentView(widgets.Images)
		if err != nil {
			return fmt.Errorf("error getting the images view: %w", err)
		}
		if v, ok := c.Views[widgets.Images].(*widgets.ImagesWidget); ok {
			return v.SetSelectedImage(c.state.selectedImage)
		}
	}
	return nil
}

func (c *Controller) moveViewRight(*gocui.Gui, *gocui.View) error {
	if c.Cui.CurrentView().Name() == widgets.Images {
		_, err := c.Cui.SetCurrentView(widgets.Results)
		if err != nil {
			return fmt.Errorf("error getting the results view: %w", err)
		}
	}
	return nil
}

func (c *Controller) RenderResultsReport(report *output.Report) error {
	if v, ok := c.Views[widgets.Results].(*widgets.ImageResultWidget); ok {
		v.RenderReport(report, "ALL", c.Cui)

	}
	return nil
}

func (c *Controller) RenderResultsReportSummary(reports []*output.Report) error {
	if v, ok := c.Views[widgets.Results].(*widgets.ImageResultWidget); ok {
		v.UpdateResultsTable(reports, c.Cui)
		_, err := c.Cui.SetCurrentView(widgets.Results)
		if err != nil {
			return fmt.Errorf("error setting current view: %w", err)
		}
	}
	return fmt.Errorf("failed to render results report summary") //nolint:goerr113
}
