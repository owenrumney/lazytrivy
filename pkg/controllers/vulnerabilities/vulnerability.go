package vulnerabilities

import (
	"errors"
	"fmt"

	"github.com/awesome-gocui/gocui"
	"github.com/owenrumney/lazytrivy/pkg/controllers/base"
	"github.com/owenrumney/lazytrivy/pkg/docker"
	"github.com/owenrumney/lazytrivy/pkg/widgets"
)

type VulnerabilityController struct {
	*base.Controller
	*state
}

func NewVulnerabilityController(cui *gocui.Gui, dockerClient *docker.Client) *VulnerabilityController {
	return &VulnerabilityController{
		&base.Controller{
			Cui:          cui,
			DockerClient: dockerClient,
			Views:        make(map[string]widgets.Widget),
			LayoutFunc:   vulnerabilityLayout,
		},
		&state{},
	}
}

func (g *VulnerabilityController) Initialise() error {
	var outerErr error

	g.Cui.Update(func(gui *gocui.Gui) error {
		if err := g.RefreshImages(); err != nil {
			return err
		}

		if err := g.configureKeyBindings(); err != nil {
			return fmt.Errorf("failed to configure global keys: %w", err)
		}

		for _, v := range g.Views {
			if err := v.ConfigureKeys(); err != nil {
				return fmt.Errorf("failed to configure view keys: %w", err)
			}
		}

		_, err := gui.SetCurrentView(widgets.Images)
		if err != nil {
			outerErr = fmt.Errorf("failed to set current view: %w", err)
		}
		return err
	})

	return outerErr
}

func (g *VulnerabilityController) CreateWidgets() error {
	maxX, maxY := g.Cui.Size()

	g.Views[widgets.Images] = widgets.NewImagesWidget(widgets.Images, g)
	g.Views[widgets.Results] = widgets.NewResultsWidget(widgets.Results, g)
	g.Views[widgets.Menu] = widgets.NewMenuWidget(widgets.Menu, 0, maxY-3, maxX-1, maxY-1, g)
	g.Views[widgets.Status] = widgets.NewStatusWidget(widgets.Status, g)
	g.Views[widgets.Host] = widgets.NewHostWidget(widgets.Host, g)

	g.SetManager()
	// g.EnableMouse()

	return nil
}

func (g *VulnerabilityController) SetKeyBinding(viewName string, key interface{}, mod gocui.Modifier, handler func(*gocui.Gui, *gocui.View) error) error {
	if err := g.Cui.SetKeybinding(viewName, key, mod, handler); err != nil {
		return fmt.Errorf("failed to set keybinding for %s: %w", key, err)
	}
	return nil
}

func vulnerabilityLayout(g *gocui.Gui) error {
	imagesWidth := 0
	viewNames := []string{widgets.Images, widgets.Host, widgets.Results, widgets.Menu, widgets.Status}
	maxX, maxY := g.Size()
	x := 0
	for _, viewName := range viewNames {
		v, err := g.View(viewName)
		if err != nil {
			return fmt.Errorf("failed to get view %s: %w", viewName, err)
		}
		w, _ := v.Size()
		h := 1
		nextW := w
		nextH := maxY - 4
		nextX := x

		switch v.Name() {
		case widgets.Host:
			nextW = imagesWidth
			nextX = 0
			nextH = 3
		case widgets.Images:
			imagesWidth = w
			h = 4
		case widgets.Status:
			nextW = maxX - 1
			h = maxY - 6
		case widgets.Results:
			nextW = maxX - 1
			nextH = maxY - 7
		case widgets.Menu:
			nextX = 0
			h = maxY - 4
			nextH = maxY
		case widgets.Remote, widgets.Filter:
			continue
		}

		_, err = g.SetView(v.Name(), nextX, h, nextW, nextH, 0)
		if err != nil && errors.Is(err, gocui.ErrUnknownView) {
			return fmt.Errorf("%w", err)
		}
		if v.Name() == widgets.Images {
			x += nextW + 1
		}
	}
	return nil
}
